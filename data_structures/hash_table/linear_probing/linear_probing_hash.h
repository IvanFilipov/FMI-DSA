/*
 * Basic implementation of hash table, using closed hashing (opened address) strategy -
 * linear probing. Depends only on our custom dynamic array.
 * This file is part of the "Data structures and algorithms" course. FMI 2018/19
 *
 * Author : Ivan Filipov	
 */

#pragma once

// toggles debug output. Value of 1 means print debug info, 0 - opposite
#define DEBUG_HASH 1 

#include <string> // std::string
#include "../../dynamic_array/dynamic_array.hpp" // dsa::dynamic_array

// predefined key and data types
typedef int data_type;
typedef std::string key_type;

class lin_pr_hash_table {

private:
	// an inner representation of each table element
	struct table_elem {
		key_type  key  = "";  // key
		data_type data = -1; // data
	};
	// typedef for easier writing
	// same as typedef dynamic_array<table_elem> hash_table;
	using hash_table = dsa::dynamic_array<table_elem>;

private :
	/* private data members */
	// the whole table
	hash_table table;
    // how many elements are there
	size_t logic_fill = 0;
    // step for linear probing
	static const size_t STEP = 1; // gcd(STEP, size) == 1 !!!
	// initial size to be allocated
	// small array only with example purpose
	static const size_t BASE_SIZE = 4;

public:
	/* object life cycle */
	lin_pr_hash_table(size_t size = BASE_SIZE) : table(size, {}) {} // create table with size # of empty objects
	// big 4 / 7 ?!
	// the ones generated by the compiler himself
	// will do the trick

private:
	/* helpers */
	// the hash function will be one for all hash tables
	static size_t hash_func(const key_type& key, size_t size);
	// helper for re-sizing the hash table
	void rehash();
	
public:
	/* interface */
	// adding new element with his key and data
	void insert(const key_type& key, const data_type& data);
	// get an element by key
	data_type get(const key_type& key) const;
	// remove element from the table
	void erase(const key_type& key);
	/// all of above have O(1) best and average case time complexity
	/// but O(n) in the worst case
	
	// prints the contain of the hash table
	void print() const;
};
